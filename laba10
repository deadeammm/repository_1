"""
Требуется разработать компьютерную игру «крестики-нолики».
Минимальные требования:
- Графичекский интерфейс
- Приложение не должно проигрывать
"""

import tkinter as tk
from tkinter import messagebox


class TicTacToe:
    def __init__(self, master):
        self.master = master
        self.master.title("Крестики-нолики")
        self.master.geometry("400x400")

        # Устанавливаем размер окна
        screen_width = master.winfo_screenwidth()
        screen_height = master.winfo_screenheight()
        window_width = 400
        window_height = 500
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        master.geometry(f"{window_width}x{window_height}+{x}+{y}")

        self.board = [['' for _ in range(3)] for _ in range(3)]
        self.current_player = 'X'
        self.game_over = False

        self.buttons = [[None for _ in range(3)] for _ in range(3)]
        for row in range(3):
            for col in range(3):
                button = tk.Button(master, text="", font=("Arial", 48), command=lambda row=row, col=col: self.click_button(row, col))
                button.grid(row=row, column=col, sticky="nsew")
                self.buttons[row][col] = button

        self.label = tk.Label(master, text="Ход: X", font=("Arial", 24))
        self.label.grid(row=3, columnspan=3)

        # Кнопка "Сброс"
        reset_button = tk.Button(master, text="Сброс", font=("Arial", 18), command=self.reset_game)
        reset_button.grid(row=4, columnspan=3)

    def click_button(self, row, col):
        if self.game_over:
            return

        if self.board[row][col] != '':
            return

        self.board[row][col] = self.current_player
        self.buttons[row][col].config(text=self.current_player)

        if self.check_win(self.current_player):
            self.game_over = True
            self.show_winner(self.current_player)
        elif self.check_draw():
            self.game_over = True
            self.show_winner("Ничья")
        else:
            self.current_player = 'O' if self.current_player == 'X' else 'X'
            self.label.config(text=f"Ход: {self.current_player}")
            if self.current_player == 'O':
                self.bot_move()

    def bot_move(self):
        # Алгоритм Minimax для нахождения оптимального хода
        best_score = float('-inf')
        best_move = None
        for row in range(3):
            for col in range(3):
                if self.board[row][col] == '':
                    self.board[row][col] = 'O'
                    score = self.minimax(self.board, False)
                    self.board[row][col] = ''  # Отменяем ход для следующей итерации
                    if score > best_score:
                        best_score = score
                        best_move = (row, col)

        if best_move is not None:
            row, col = best_move
            self.click_button(row, col)

    def minimax(self, board, is_maximizing_player):
        # Проверка на выигрыш или ничью
        if self.check_win('O'):
            return 1
        elif self.check_win('X'):
            return -1
        elif self.check_draw():
            return 0

        if is_maximizing_player:
            best_score = float('-inf')
            for row in range(3):
                for col in range(3):
                    if board[row][col] == '':
                        board[row][col] = 'O'
                        score = self.minimax(board, False)
                        board[row][col] = ''
                        best_score = max(score, best_score)
            return best_score
        else:  # Минимизирующий игрок (X)
            best_score = float('inf')
            for row in range(3):
                for col in range(3):
                    if board[row][col] == '':
                        board[row][col] = 'X'
                        score = self.minimax(board, True)
                        board[row][col] = ''
                        best_score = min(score, best_score)
            return best_score

    def check_win(self, player):
        # Проверяем строки, столбцы и диагонали
        for i in range(3):
            if self.board[i][0] == self.board[i][1] == self.board[i][2] == player:
                return True
            if self.board[0][i] == self.board[1][i] == self.board[2][i] == player:
                return True

        if self.board[0][0] == self.board[1][1] == self.board[2][2] == player:
            return True
        if self.board[0][2] == self.board[1][1] == self.board[2][0] == player:
            return True

        return False

    def check_draw(self):
        for row in range(3):
            for col in range(3):
                if self.board[row][col] == '':
                    return False
        return True

    def reset_game(self):
        self.board = [['' for _ in range(3)] for _ in range(3)]
        self.current_player = 'X'
        self.game_over = False
        self.label.config(text="Ход: X")
        for row in range(3):
            for col in range(3):
                self.buttons[row][col].config(text="")

    def show_winner(self, winner):
        messagebox.showinfo("Игра окончена!", f"{winner} победил!")


if __name__ == "__main__":
    root = tk.Tk()
    game = TicTacToe(root)
    root.mainloop()
