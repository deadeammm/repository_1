"""
С клавиатуры вводится два числа K и N. Квадратная матрица А(N,N), состоящая из 4-х равных по размерам подматриц, B,C,D,E
заполняется случайным образом целыми числами в интервале [-10,10]. Для отладки использовать не случайное заполнение,
а целенаправленное.
Для простоты все индексы в подматрицах относительные.
По сформированной матрице F (или ее частям) необходимо вывести не менее 3 разных графиков.
Программа должна использовать функции библиотек numpy  и mathplotlib

Вариант 12
Формируется матрица F следующим образом: скопировать в нее А и если в В количество простых чисел в нечетных столбцах больше,
чем сумма чисел в четных строках, то поменять местами В и Е симметрично, иначе С и Е поменять местами несимметрично. 
При этом матрица А не меняется. После чего если определитель матрицы А больше суммы диагональных элементов матрицы F, 
то вычисляется выражение: A^-1*A^T – K * F^-1, иначе вычисляется выражение (A^-1 +G-F^-1)*K, где G-нижняя треугольная матрица, полученная из А. 
Выводятся по мере формирования А, F и все матричные операции последовательно.
"""

import numpy as np
import matplotlib.pyplot as plt
import numpy.linalg as LA


# Функция для проверки ввода на число
def check_input(prompt):
    while True:
        user_input = input(prompt)
        if user_input.isdigit():
            return int(user_input)
        else:
            print("Пожалуйста, введите целое число.")


# Ввод чисел K и N с проверкой на дурака
K = check_input("Введите число K: ")
N = check_input("Введите число N: ")

# Создаем матрицу А с размером N x N и заполняем ее случайными числами от -10 до 10
A = np.random.randint(-10, 11, (N, N))

# Создаем матрицу F, копируя матрицу A
F = np.copy(A)


# Подсчет количества простых чисел в нечетных столбцах матрицы B
def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(np.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True


count_primes = 0
sum_even_rows = np.sum(A[1::2, :])

for i in range(N):
    if i % 2 != 0:  # Нечетные столбцы
        for j in range(N // 2):
            if is_prime(F[j, i]):
                count_primes += 1

# Проверка условий и обмен подматриц
if count_primes > sum_even_rows:
    if F[:N // 2, :N // 2].shape == F[N // 2:, N // 2:].shape:
        print("Матрица A перед обменом:")
        print(A)

        temp = np.copy(F[:N // 2, :N // 2])
        F[:N // 2, :N // 2] = F[N // 2:, N // 2:]
        F[N // 2:, N // 2:] = temp
        print("Подматрицы успешно поменялись местами.")
    else:
        print("Невозможно поменять местами подматрицы из-за разных размеров.")

if F.shape[0] > 0 and F.shape[1] > 0:
    print("Матрица F:")
    print(F)
else:
    print("Матрица F пуста или имеет неверные размеры.")

# Получаем нижнюю треугольную матрицу из А
G = np.tril(A)

# Проверка условия для выбора операции
if LA.det(A) > np.sum(np.diagonal(F)):
    expression = np.dot(LA.inv(A), A.T) - K * LA.inv(F)
else:
    expression = (LA.inv(A) + G - LA.inv(F)) * K

print("Результат вычисления выражения:")
print(expression)

# Построение графиков
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.imshow(A, cmap='coolwarm', interpolation='nearest')
plt.title('Матрица A')

plt.subplot(1, 3, 2)
plt.imshow(F, cmap='viridis', interpolation='nearest')
plt.title('Матрица F')

plt.subplot(1, 3, 3)
plt.imshow(A - F, cmap='plasma', interpolation='nearest')
plt.title('A - F')

plt.tight_layout()
plt.show()
