"""
Задана рекуррентная функция. Область определения функции – натуральные числа. Написать программу сравнительного
вычисления данной функции рекурсивно и итерационно (значение, время). Определить (смоделировать) границы применимости
рекурсивного и итерационного подхода. Результаты сравнительного исследования времени вычисления представить в табличной
и графической форме в виде отчета по лабораторной работе.
F(n<5)=10; F(n)=(-1)n*(5F(n-1)-7(n-2)+F(n//5)/(2n)!) (при n >12), F(n)=F(n-2)-F(n-1) (при 5<n<=12)
"""

import timeit
import pandas as pd
import matplotlib.pyplot as plt


# Функция для вычисления факториала числа
def custom_factorial(num):
    result = 1
    for i in range(1, num + 1):
        result *= i
    return result


# Рекурсивная функция для вычисления значения
def recursive_factorial(n):
    print(f"Вычисление рекурсивная_F({n})")
    if n < 5:
        return 10
    elif n > 12:
        return ((-1) ** n * (5 * recursive_factorial(n - 1) - 7 * (n - 2) + recursive_factorial(n // 5)) /
                custom_factorial(2 * n))
    else:
        return recursive_factorial(n - 2) - recursive_factorial(n - 1)


# Итеративная функция для вычисления значения
def iterative_factorial(n):
    print(f"Вычисление итеративная_F({n})")
    if n < 5:
        return 10

    f_values = [10] * 5

    for i in range(5, n + 1):
        if i > 12:
            f = (-1) ** i * (5 * f_values[-1] - 7 * (i - 2) + f_values[i // 5]) / custom_factorial(2 * i)
        else:
            f = f_values[-2] - f_values[-1]

        f_values.append(f)

    return f_values[-1]


# Вычисление и сравнение значений для нескольких значений n
for n in range(5, 15):
    print(f"n = {n}")
    result_recursive = recursive_factorial(n)
    result_iterative = iterative_factorial(n)
    print(f"Рекурсивное значение: {result_recursive}")
    print(f"Итеративное значение: {result_iterative}")
    print()

# Определение времени выполнения для разных значений n
n_values = list(range(5, 25))
recursive_times = []
iterative_times = []

for n in n_values:
    time_recursive = timeit.timeit(lambda: recursive_factorial(n), number=1)
    recursive_times.append(time_recursive)

    time_iterative = timeit.timeit(lambda: iterative_factorial(n), number=1)
    iterative_times.append(time_iterative)

data = {"n": n_values, "Рекурсивное время (сек)": recursive_times, "Итеративное время (сек)": iterative_times}
df = pd.DataFrame(data)

print(df)

# Визуализация времени выполнения
plt.figure(figsize=(12, 6))
plt.plot(n_values, recursive_times, label='Рекурсивное время (сек)', marker='o')
plt.plot(n_values, iterative_times, label='Итеративное время (сек)', marker='x')
plt.xlabel('n')
plt.ylabel('Время (сек)')
plt.title('Сравнение времени выполнения рекурсивной и итеративной функций')
plt.legend()
plt.grid(True)
plt.show()
