"""
Задание:
С клавиатуры вводится два числа K и N. Квадратная матрица А(N,N), состоящая из 4-х равных по размерам подматриц B,C,D,E 
заполняется случайным образом целыми числами в интервале [-10,10]. Для тестирования использовать не случайное заполнение, 
а целенаправленное.

Вариант 12
Формируется матрица F следующим образом:если в В количество простых чисел в нечетных столбцах в области 2 больше,
чем сумма чисел в четных строках в области 1, то поменять в Е симметрично области 1 и 2 местами, иначе С и Е поменять
местами несимметрично. При этом матрица А не меняется. После чего вычисляется выражение: ((К*A)*А– K*A^T.
Выводятся по мере формирования А, F и все матричные операции последовательно.
"""

import random


def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True


def generate_matrix(n):
    matrix = []
    for _ in range(n):
        row = [random.randint(-10, 10) for _ in range(n)]
        matrix.append(row)
    return matrix


def count_primes(matrix):
    count = 0
    for i in range(len(matrix)):
        for j in range(len(matrix)):
            if j % 2 != 0 and is_prime(matrix[j][i]):
                count += 1
    return count


def swap_symmetric(matrix, start_row, end_row):
    for i in range(start_row, end_row):
        for j in range(len(matrix)//2):
            matrix[i][j], matrix[i][-(j+1)] = matrix[i][-(j+1)], matrix[i][j]


def swap_asymmetric(matrix1, matrix2):
    for i in range(len(matrix1)):
        for j in range(len(matrix1)):
            matrix1[i][j], matrix2[j][i] = matrix2[j][i], matrix1[i][j]


def create_matrix_f(a):
    b = generate_matrix(len(a))
    c = generate_matrix(len(a))
    d = generate_matrix(len(a))
    e = generate_matrix(len(a))

    f = [row.copy() for row in e]

    primes_count = count_primes(b)
    even_sum = sum([sum(row) for i, row in enumerate(c) if i % 2 == 0])

    if primes_count > even_sum:
        swap_symmetric(e, 0, len(e)//2)
    else:
        swap_asymmetric(c, e)

    return f


def matrix_operations(a, k):
    ka = [[k*element for element in row] for row in a]
    at = [[row[i] for row in a] for i in range(len(a))]
    k_a_a = [[sum([x * y for x, y in zip(row_a, row_at)]) for row_at in at] for row_a in ka]

    result = [[ka[i][j] - k_a_a[i][j] for j in range(len(a))] for i in range(len(a))]

    return result


def main():
    k = int(input("Введите число K: "))
    n = int(input("Введите число N: "))

    a = generate_matrix(n)
    print("Матрица A:")
    for row in a:
        print(row)
    print()

    f = create_matrix_f(a)
    print("Матрица F:")
    for row in f:
        print(row)
    print()

    result = matrix_operations(a, k)
    print("Результат матричных операций:")
    for row in result:
        print(row)


if __name__ == "__main__":
    main()
